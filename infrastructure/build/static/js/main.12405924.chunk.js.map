{"version":3,"sources":["controllers/config.ts","aws-exports.ts","components/react-logo.png","components/Modal.tsx","components/Header.tsx","components/BlogItem.tsx","components/EntryItem.tsx","components/BlogPage.tsx","components/image_box.png","components/EntryFormPage.tsx","components/CreateBlog.tsx","components/BlogListFilter.tsx","components/Spinner.tsx","utils/paginate.ts","utils/filter.ts","components/Dashboard.tsx","components/Home.tsx","utils/history.ts","controllers/AuthService/AuthService.ts","controllers/DataService/protocol.ts","utils/base64Encode.ts","controllers/DataService/DataService.ts","utils/generateId.ts","components/CreateEntry.tsx","images/facebook_icon.svg","images/portfolio-icon.png","images/github-logo-cat.png","components/Footer.tsx","components/MyBlogsPage.tsx","components/ScrollToTop.ts","router/AppRouter.tsx","index.tsx"],"names":["config","REGION","USER_POOL_ID","IDENTITY_POOL_ID","APP_CLIENT_ID","EMAIL_USER_ID","EMAIL_TEMPLATE_ID","EMAIL_SERVICE_ID","BLOGS_PHOTOS_BUCKET","awsconfig","API","endpoints","name","endpoint","modalReducer","state","action","type","newState","Error","ModalComponent","props","useReducer","code","email","username","password","error","registerMod","verify","dispatch","postRegister","React","useCallback","postSignin","postVerify","onChangeUsername","e","target","value","onChangeEmail","onChangePassword","onChangeCode","setError","onReset","onRegisterClick","verifySignUp","a","preventDefault","authService","confirmSignUp","clearModal","console","log","isOpen","modalOpen","contentLabel","onRequestClose","closeTimeoutMS","ariaHideApp","className","onSubmit","data-testid","placeholder","style","fontSize","height","width","textAlign","onChange","EmailValidator","test","onSubmission","htmlFor","onClick","Header","user","setUser","useState","setModal","isActive","setActive","closeMenu","document","body","classList","remove","login","authUser","signUp","src","img","alt","add","exact","activeClassName","to","tabIndex","undefined","Modal","defaultProps","BlogItem","blog","dataService","image","setImage","EditorState","createEmpty","editorState","setEditor","useEffect","content","convertFromRaw","JSON","parse","editorNextState","createWithContent","retrieveImage","key","getBlogFile","result","base64Data","btoa","Body","reduce","data","byte","String","fromCharCode","imageCompilation","blogPhotoId","Fragment","textDecoration","id","title","createdAt","toolbarHidden","wrapperClassName","readOnly","owner","entries","length","pathname","blog_id","EntryItem","entry","entryPhotoId","BlogPage","match","setBlog","loadBlog","params","map","item","EntryFormPage","userId","setTitle","imageToUpload","setEditorState","getCurrentContent","contentToSubmit","stringify","convertToRaw","input","getElementById","file","files","uploadBlogFile","then","res","catch","err","fileSelector","handleImageUpload","event","binaryData","push","URL","createObjectURL","Blob","addEventListener","removeEventListener","onEditorStateChange","accept","marginTop","CreateBlog","currentUser","setUserId","completed","setCompleted","Promise","resolve","getUserAttributes","alert","Value","createBlog","BlogListFilter","text","search","setText","setSearch","Spinner","paginateLocal","blogs","page","end","i","filter","includes","Dashboard","setPage","blogCollection","setBlogCollection","loading","setLoading","getBlogs","resultBlogs","filterBlogs","displayLength","textArg","searchArg","Array","Math","ceil","_","index","Home","color","padding","createBrowserHistory","Amplify","configure","Auth","mandatorySignIn","region","identityPoolId","userPoolId","userPoolWebClientId","authenticationFlowType","AuthService","signIn","getUsername","userAttributes","attributes","signOut","CREATE_USER","gql","CREATE_BLOG","CREATE_ENTRY","BLOGS_BY_USER","DELETE_BLOG","LOAD_BLOGS","FIND_BLOG","base64Encode","rej","reader","FileReader","readAsDataURL","onload","onerror","DataService","currentSession","getIdToken","getJwtToken","graphql","query","variables","blogsByUser","blogId","s3Client","S3","getObject","promise","this","getAuthToken","authToken","fileBase64","random","toString","slice","post","headers","createBlogInput","authMode","resultBlog","deleteBlogInput","createEntryInput","resultEntry","createUserInput","CreateEntry","useLocation","createEntry","Footer","href","img2","img3","MyBlogsPage","deleted","setDeleted","getBlogsByUser","loadBlogs","deleteBlog","ScrollToTop","unlisten","history","listen","window","scrollTo","Contact","lazy","Partners","AWS","credentials","CognitoIdentityCredentials","IdentityPoolId","AppRouter","bind","setState","path","component","render","fallback","Component","ReactDOM"],"mappings":"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","file":"static/js/main.12405924.chunk.js","sourcesContent":["export const config = {\n    REGION: 'ap-southeast-2',\n    USER_POOL_ID: 'ap-southeast-2_4y5PUEuHO',\n    IDENTITY_POOL_ID: 'ap-southeast-2:8ca5a2e8-af30-4331-80f5-ae06bd4c625e',\n    APP_CLIENT_ID: '3kuddl04r6vii8ej9tdireh7mn',\n    EMAIL_USER_ID: 'user_fFC6R7fs9QAFWZ3jNtSCK',\n    EMAIL_TEMPLATE_ID: 'template_qnbr2ql',\n    EMAIL_SERVICE_ID: 'service_pkt56l2',\n    BLOGS_PHOTOS_BUCKET: 'blogs-photos-02f588656adc'\n}","const awsconfig =  {\n    API : {\n        endpoints : [{\n            name: 'blogs-photos-api',\n            endpoint: 'https://55vuvm1sv2.execute-api.ap-southeast-2.amazonaws.com/prod/'\n        }],\n        \"aws_appsync_graphqlEndpoint\": \"https://scow7uzczzh7bejwuvwzdpvfwy.appsync-api.ap-southeast-2.amazonaws.com/graphql\",\n        \"aws_appsync_region\": \"ap-southeast-2\",\n        \"aws_appsync_authenticationType\": \"API_KEY\",\n        \"aws_appsync_apiKey\": \"da2-ypnlfnxxwnbdzczo2jya5yl7su\",\n    }\n};\n\nexport default awsconfig;","export default __webpack_public_path__ + \"static/media/react-logo.65ca18b4.png\";","import React, { useReducer } from \"react\";\nimport Modal from \"react-modal\";\nimport { NewUserInput } from \"../types/TypeDefs\";\nimport * as EmailValidator from 'email-validator';\nimport { AuthService } from \"../controllers/AuthService/AuthService\";\n\n\ninterface IModalProps {\n  onSubmission: (user:NewUserInput) => void;\n  clearModal: () => void;\n  modalOpen: boolean;\n  authService: AuthService;\n}\n\ninterface CustomEvent {\n  target: HTMLInputElement\n}\n\ninterface IModalState {\n  code: string\n  email: string\n  username: string\n  password: string\n  error: string\n  registerMod: boolean\n  verify: boolean\n}\n\ntype modalActionGuard = 'REGISTER'|'SIGNIN'|'VERIFY'|'CHANGE_USER'|'CHANGE_EMAIL'|'CHANGE_PASSWORD'|'CHANGE_CODE'|'SET_ERROR'|'RESET'|'REGISTER_CLICK';\n\ninterface IAction {\n  type: modalActionGuard;\n  newState: Partial<IModalState>\n}\n\n\nconst modalReducer = (state:IModalState,action:IAction):IModalState => {\n\n  const {type,newState} = action;\n\n  switch(type){\n    case 'REGISTER': case 'VERIFY': case 'SIGNIN': case 'RESET': case 'REGISTER_CLICK': case 'SET_ERROR': case 'CHANGE_CODE': case 'CHANGE_EMAIL': case 'CHANGE_PASSWORD': case 'CHANGE_USER':\n    {\n      return {\n        ...state,\n        ...newState\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action type ${type}`);\n    }\n  }\n}\n\nconst ModalComponent:React.FC<IModalProps> = (props) => {\n\n  const [state,dispatch] = useReducer(modalReducer, {\n    code : '',\n    email: '',\n    username: '',\n    password: '',\n    error: '',\n    registerMod: false,\n    verify: false\n  })\n\n  const postRegister = React.useCallback(() => {\n        dispatch({type: 'REGISTER', newState: {\n            registerMod: false,\n            error: '',\n            email: '',\n            password: '',\n            username: '',\n            verify: true\n          }\n        });\n      },[]);\n\n  const postSignin = React.useCallback(() => {\n    dispatch({type: 'SIGNIN', newState: {\n        error: '',\n        email: '',\n        password: '',\n        verify: false\n    }});\n  },[]);\n\n  const postVerify = React.useCallback(() => {\n    dispatch({type: 'VERIFY', newState: {\n      verify: false\n    }});\n  },[]);\n\n  const onChangeUsername = React.useCallback((e:CustomEvent) => {\n    dispatch({type: 'CHANGE_USER', newState: {\n      username: e.target.value\n    }});\n  },[]);\n\n  const onChangeEmail = React.useCallback((e:CustomEvent) => {\n    dispatch({type: 'CHANGE_EMAIL', newState: {\n      email: e.target.value\n    }});\n  },[]);\n\n  const onChangePassword = React.useCallback((e:CustomEvent) => {\n    dispatch({type: 'CHANGE_PASSWORD', newState: {\n      password: e.target.value\n    }});\n  },[]);\n\n  const onChangeCode = React.useCallback((e:CustomEvent) => {\n    dispatch({type: 'CHANGE_CODE', newState: {\n      code: e.target.value\n    }});\n  },[]);\n\n  const setError = React.useCallback((error) => {\n    dispatch({type: \"SET_ERROR\",newState: {\n      error\n    }});\n  },[]);\n\n  const onReset = React.useCallback(() => dispatch({type:'RESET',newState: {\n    email: '',\n    username: '',\n    password: '',\n    error: '',\n    registerMod: false,\n  }})\n  ,[]);\n\n  const onRegisterClick = React.useCallback(() => dispatch({type:'REGISTER_CLICK',newState: {\n    email: '',\n    username: '',\n    password: '',\n    error: '',\n    registerMod: true,\n  }})\n  ,[]);\n\n  const { code, email, username, password, error, registerMod, verify } = state;\n\n  const verifySignUp = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    let answer:boolean = false;\n\n    answer = await props.authService.confirmSignUp(username,code);\n\n    if (answer === true) {\n      \n      postVerify();\n      props.clearModal();\n\n    } else {\n      console.log('Please re-enter code')\n    }\n\n  }\n\n  const onSubmission = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_])[a-zA-Z0-9!@#$%^&*_]{8,16}$/;\n\n    if((registerMod && !username) || !password || !email){\n      \n      setError('All fields are required');\n\n    } else if (!EmailValidator.validate(email)){\n      \n      setError('Email must be in a valid format');\n\n    }else if (registerMod && !passwordRegex.test(password)) {\n      \n      setError(`Password policy requires at least :\n      \n      8-16 characters\n      One number\n      One uppercase letter\n      One lowercase letter\n      One special character`);\n\n    } else {\n\n      props.onSubmission({\n        username: username,\n        email: email,\n        password: password \n      });\n\n      if(registerMod){\n        postRegister();\n      } else {\n        postSignin()\n\n        props.clearModal();\n      }\n    }\n  };\n\n  return (\n      <Modal\n        isOpen ={!!props.modalOpen}\n        contentLabel=\"Login modal\"\n        onRequestClose={props.clearModal}\n        closeTimeoutMS={0}\n        ariaHideApp={false}\n        className=\"s7-modal\" \n      >\n        {verify ? (\n          <div className=\"s7-modal__verify\">\n            <h5>Please check your email and</h5>\n            <h5>enter the 6-digit verification code</h5>\n            <h5>to confirm your account</h5>\n            <form onSubmit={verifySignUp} className=\"s7-modal__form\">\n              <input type=\"text\"\n                  data-testid=\"code\"\n                  name=\"code\"\n                  placeholder=\"*   *   *   *   *   *\"\n                  style={{ fontSize: \"14px\", height: \"3rem\", width: \"9em\", textAlign:\"center\" }}\n                  onChange={onChangeCode}>\n              </input>\n              <br/>\n              <br/>\n              <button className=\"main-button\" type=\"submit\">Enter</button>\n            </form>\n          </div>\n        ) : (\n        <>\n        <h3 className=\"s7-modal__title\">{ registerMod ? 'Registration details' : 'Sign in details' } </h3>\n        <form onSubmit={onSubmission}>\n          {registerMod && (\n            <>\n              <br />\n              <label htmlFor=\"userName\">Username:</label>\n              <br />\n                <input\n                  type=\"text\"\n                  data-testid=\"username\"\n                  name=\"username\"\n                  placeholder=\"username\"\n                  style={{ fontSize: \"12px\", height: \"1.5rem\", width: \"22rem\" }}\n                  onChange={onChangeUsername}\n                ></input>\n              <br />\n            </>\n          )}\n          <br />\n          <label htmlFor=\"email\">Email:</label>\n          <br />\n          <input\n            type=\"text\"\n            data-testid=\"useremail\"\n            name=\"useremail\"\n            placeholder=\"email\"\n            style={{ fontSize: \"12px\", height: \"1.5rem\", width: \"22rem\" }}\n            onChange={onChangeEmail}\n          ></input>\n          <br />\n          <br />\n          <label htmlFor=\"password\">Password:</label>\n          <br />\n          <input\n            type=\"text\"\n            data-testid=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            style={{ fontSize: \"12px\", height: \"1.5rem\", width: \"22rem\" }}\n            onChange={onChangePassword}\n          ></input>\n          {error && (<div className=\"s7-modal__error\" data-testid=\"modal-error\"><h5>{error}</h5></div>)}\n          <div className=\"s7-modal__spacer\">\n            <button className=\"main-button\" onClick={() => {\n              onReset();\n              props.clearModal();\n              }}>\n              Cancel\n            </button>\n            <button className=\"main-button\" type=\"submit\">Enter</button>\n          </div>  \n        </form>\n        {!registerMod && (<div>\n          <h5>If you are not a member please register</h5>\n          <button className=\"main-button\" onClick={onRegisterClick}>\n            Register\n          </button>\n        </div>)}\n      </>\n      )}\n    </Modal>\n  )\n}\n\nexport default ModalComponent;\n","import React, { useState } from 'react';\r\nimport img from './react-logo.png';\r\nimport Modal from './Modal';\r\nimport { AuthService } from '../controllers/AuthService/AuthService';\r\nimport { User, NewUserInput } from '../types/TypeDefs';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\ninterface IHeaderProps {\r\n    authService: AuthService;\r\n    user?: User;\r\n    setUser: (authUser:User|undefined) => void;\r\n}\r\n\r\nconst Header:React.FC<IHeaderProps> = (props) => {\r\n    \r\n    const { authService, user, setUser } = props;\r\n\r\n    const [modalOpen,setModal] = useState<boolean>(false);\r\n    const [isActive, setActive] =  useState<boolean>(false);\r\n\r\n\r\n    const openMenu = ():void => {\r\n        document.body.classList.add('nav-is-active');\r\n        setActive(true);\r\n    }\r\n\r\n    const closeMenu = ():void => {\r\n        document.body.classList.remove('nav-is-active');\r\n        setActive(false);\r\n    }\r\n\r\n    const onSignInClick = ():void => {\r\n        if(user){\r\n            setUser(undefined);\r\n        }else{\r\n            setModal(true);\r\n            document.body.classList.remove('nav-is-active')\r\n        }\r\n    }\r\n    \r\n    const clearModal = ():void => {\r\n        setModal(false);\r\n    };\r\n  \r\n    const onSubmission = async (user:NewUserInput): Promise<void> => {\r\n        if(!user.username){\r\n            const authUser = await authService.login(user.email, user.password)\r\n            //console.log('Login: ', authUser);\r\n            setUser(authUser);\r\n        }\r\n        else{\r\n            await authService.signUp(user.username,user.password,user.email)\r\n            //console.log('Registered: ', authUser);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <header className=\"s6-hc\">\r\n            <div className=\"s6-hc__title\">\r\n                <span>\r\n                    <h1><img  src={img} className='s6-hc__logo' alt=\"React logo\" />React.JS blog template</h1>\r\n                </span>\r\n                <button className=\"s6-hc__toggle\" onClick={isActive ? closeMenu: openMenu}>\r\n                    <span className=\"hamburger\" data-testid=\"hamburger\">\r\n                        <span className=\"hamburger-inner\"></span>\r\n                    </span>\r\n                </button>\r\n            </div>\r\n            <div className=\"s6-hc__nc\">\r\n                <ul>\r\n                    <li>\r\n                        <NavLink exact onClick={closeMenu} activeClassName=\"s6-hc__link--active\" to=\"/\" tabIndex={1}>\r\n                            Home\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink onClick={closeMenu} activeClassName=\"s6-hc__link--active\" to=\"/dashboard\" tabIndex={2}>\r\n                            Dashboard\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink onClick={closeMenu} activeClassName=\"s6-hc__link--active\" to=\"/createblog\" tabIndex={3}>\r\n                            Create blog\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink onClick={closeMenu} activeClassName=\"s6-hc__link--active\" to=\"/myblogs\" tabIndex={4}>\r\n                            My blogs\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <div className=\"s6-hc__signin\">\r\n                            <h3>{user ? `Signed in as : ${user.username}` : ''}</h3>\r\n                            <button className=\"main-button\" onClick={onSignInClick} tabIndex={5}>\r\n                                {user ? \"Sign Out\" : \"Sign In\"}\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <Modal\r\n                modalOpen={modalOpen}\r\n                clearModal={clearModal}\r\n                onSubmission={onSubmission}\r\n                authService={authService}\r\n            />\r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n    user: undefined\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { DataService } from '../controllers/DataService/DataService';\r\nimport { Blog } from '../types/TypeDefs';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport { EditorState, convertFromRaw } from 'draft-js';\r\n\r\n\r\ninterface IBlogItemProps {\r\n  blog: Blog;\r\n  dataService: DataService\r\n}\r\n\r\n\r\nconst BlogItem:React.FC<IBlogItemProps> = (props) => {\r\n\r\n  const {blog, dataService} = props;\r\n\r\n  const [image,setImage] = useState<string>('');\r\n  const [editorState,setEditor] = useState<EditorState>(EditorState.createEmpty());\r\n\r\n  useEffect(() => {\r\n\r\n    if(blog.content){\r\n    const content = convertFromRaw(JSON.parse(blog.content));\r\n\r\n    const editorNextState = EditorState.createWithContent(content);\r\n\r\n    setEditor(editorNextState);\r\n    }\r\n\r\n    const retrieveImage = async (key:string) => {\r\n\r\n      const result:any = await dataService.getBlogFile(key);\r\n  \r\n      let base64Data:string = '';\r\n  \r\n      base64Data = btoa(result.Body.reduce((data:any,byte:any) => data + String.fromCharCode(byte),''));\r\n  \r\n      const imageCompilation = `data:image/jpeg;base64,${base64Data}`;\r\n  \r\n      setImage(imageCompilation);\r\n    }\r\n\r\n    if(blog.blogPhotoId){\r\n      retrieveImage(blog.blogPhotoId);\r\n    }\r\n\r\n  },[dataService, blog]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <NavLink style={{ textDecoration: 'none' }} to={`/blog/${blog.id}`}>\r\n        <div className=\"section-1-bi\">\r\n          <div className=\"s1-bi__upper\">\r\n            <h1>{blog.title}</h1>\r\n            <span>{blog.createdAt}</span>\r\n          </div>\r\n          <div className=\"s1-bi__inner\">\r\n            <Editor \r\n              toolbarHidden\r\n              editorState={editorState}\r\n              wrapperClassName=\"s1-bi__entry-wrapper s1-bi__display-wrapper\"\r\n              readOnly={true}\r\n            />\r\n          </div>\r\n          {image && (<div className=\"s1-bi__image center\">\r\n            <img src={image} alt='blog_image' />\r\n          </div>)}\r\n          <div className=\"s1-bi__lower\">\r\n            <p>Written by: {blog.owner?.username}</p>\r\n            <p>Replies: {blog.entries?.length}</p>\r\n          </div>\r\n        </div>\r\n      </NavLink>\r\n      <NavLink\r\n        to={{\r\n          pathname: '/createentry',\r\n          state: {\r\n            blog_id: blog.id,\r\n          },\r\n        }}\r\n      >\r\n        <button className=\"blog-button\">Reply</button>\r\n      </NavLink>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BlogItem;","import React, { useEffect, useState } from 'react';\r\nimport { DataService } from '../controllers/DataService/DataService';\r\nimport { Entry } from '../types/TypeDefs';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport { EditorState, convertFromRaw } from 'draft-js';\r\n\r\n\r\ninterface IEntryItemProps {\r\n  entry: Entry;\r\n  dataService: DataService;\r\n}\r\n\r\nexport const EntryItem:React.FC<IEntryItemProps> = (props) => {\r\n  const [image,setImage] = useState<string>('');\r\n  const [editorState,setEditor] = useState<EditorState>(EditorState.createEmpty());\r\n\r\n  const { entry, dataService } = props;\r\n\r\n  useEffect(() => {\r\n\r\n    if(entry.content){\r\n    const content = convertFromRaw(JSON.parse(entry.content));\r\n\r\n    const editorNextState = EditorState.createWithContent(content);\r\n\r\n    setEditor(editorNextState);\r\n    }\r\n\r\n    const retrieveImage = async (key:string) => {\r\n\r\n      const result:any = await dataService.getBlogFile(key);\r\n  \r\n      let base64Data:string = '';\r\n  \r\n      base64Data = btoa(result.Body.reduce((data:any,byte:any) => data + String.fromCharCode(byte),''));\r\n  \r\n      const imageCompilation = `data:image/jpeg;base64,${base64Data}`;\r\n  \r\n      setImage(imageCompilation);\r\n    }\r\n\r\n    if(entry.entryPhotoId){\r\n      retrieveImage(entry.entryPhotoId);\r\n    }\r\n\r\n  },[dataService, entry]);\r\n  \r\n  return (\r\n    <div className=\"section-1-bi\">\r\n      <div className=\"s1-bi__upper\">\r\n        <h1>{entry.title}</h1>\r\n        <span>{entry.createdAt}</span>\r\n      </div>\r\n      <div className=\"s1-bi__inner\">\r\n        <Editor \r\n          toolbarHidden\r\n          editorState={editorState}\r\n          wrapperClassName=\"s1-bi__entry-wrapper s1-bi__display-wrapper\"\r\n          readOnly={true}\r\n        />\r\n      </div>\r\n      {image && (<div className=\"s1-bi__image center\">\r\n            <img src={image} alt='entry_image' />\r\n          </div>)}\r\n      <div className=\"s1-bi__lower\">\r\n        <p>Written by: {entry.owner?.username}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport BlogItem from \"./BlogItem\";\r\nimport { EntryItem } from \"./EntryItem\";\r\nimport { Blog } from '../types/TypeDefs';\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { DataService } from \"../controllers/DataService/DataService\";\r\n\r\ninterface IBlogPageProps {\r\n  dataService: DataService;\r\n}\r\n\r\nconst BlogPage:React.FC<IBlogPageProps & RouteComponentProps<{ id: string }>> = (props) => {\r\n\r\n    const {dataService, match} = props;\r\n  \r\n    const [blog, setBlog] = useState<Blog>({\r\n      id: '',\r\n      createdAt: '',\r\n      title: '',\r\n      content: '',\r\n      user:'',\r\n      blogPhotoId: '',\r\n      entries:[]\r\n    });\r\n\r\n    useEffect(() => {\r\n      const loadBlog = async () => {\r\n\r\n        const result:Blog = await dataService.loadBlog(match.params.id);\r\n    \r\n        setBlog({...result});\r\n      }\r\n\r\n      loadBlog();\r\n    },[dataService, match]);\r\n\r\n    //let data:Blog[] = db_mock.filter(item => item.id === parseInt(this.props.match.params.id))\r\n\r\n    return (\r\n      <div className=\"s3-bc\">\r\n        <BlogItem key={blog?.id} blog={{ ...blog }} dataService={dataService}/>\r\n        <h3>Entries:</h3>\r\n        {blog?.entries?.map((item) => {\r\n          return <EntryItem key={item.id} entry={{...item}} dataService={dataService}/>;\r\n        })}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default BlogPage;\r\n","export default __webpack_public_path__ + \"static/media/image_box.cd732acf.png\";","import React, { useState, useEffect } from 'react';\r\nimport { DataService } from '../controllers/DataService/DataService';\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport img from './image_box.png';\r\nimport '../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\n\r\ninterface IEntryFormProps {\r\n  onSubmission : (title:string,content:string,blogPhotoId:string) => void;\r\n  dataService: DataService;\r\n  userId: String;\r\n}\r\n\r\n\r\nconst EntryFormPage: React.FC<IEntryFormProps> = (props) => {\r\n\r\n  const { userId, dataService, onSubmission } = props;\r\n\r\n  const [title,setTitle] = useState<string>('');\r\n  const [error,setError] = useState<string>('');\r\n  const [imageToUpload,setImage] = useState<string>('');\r\n  const [editorState,setEditorState] = useState<EditorState>(EditorState.createEmpty());\r\n\r\n  const onSubmit = async (e:React.SyntheticEvent<EventTarget>) => {\r\n    e.preventDefault();\r\n\r\n    const content:ContentState = editorState.getCurrentContent();\r\n    const contentToSubmit:string = JSON.stringify(convertToRaw(content));\r\n\r\n    if (!title||!contentToSubmit){\r\n      setError('Both title and content are required');\r\n    } else if(userId) {\r\n      setError('');\r\n      \r\n      const input = document.getElementById('file-upload') as HTMLInputElement;\r\n    \r\n      const file = input.files![0];\r\n\r\n      let blogPhotoId: string = '';\r\n\r\n      if(file)\r\n      await dataService.uploadBlogFile(file).then(res => blogPhotoId = res).catch(err => console.log(err));\r\n\r\n      onSubmission(\r\n        title,\r\n        contentToSubmit,\r\n        blogPhotoId\r\n      );\r\n\r\n    } else {\r\n      setError('Please sign in');\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    const fileSelector = document.getElementById('file-upload');\r\n\r\n    const handleImageUpload = (event:any) => {\r\n\r\n      const file: any = (event.target as HTMLInputElement).files![0]\r\n\r\n      const binaryData:string[] = [];\r\n\r\n      binaryData.push(file);\r\n\r\n      const image = URL.createObjectURL(new Blob(binaryData, {type: \"image/*\"}));\r\n\r\n      setImage(image);\r\n\r\n    }\r\n\r\n    fileSelector!.addEventListener('change', handleImageUpload);\r\n\r\n    return () => fileSelector?.removeEventListener('change', handleImageUpload);\r\n\r\n  },[imageToUpload]);\r\n\r\n\r\n    return (\r\n      <div className=\"s4-cc__ec\">\r\n        <form onSubmit={onSubmit}>\r\n          <label htmlFor=\"title\">Title:</label>\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            id=\"title\"\r\n            name=\"title\"\r\n            placeholder=\"...\"\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.target.value)}\r\n          ></input>\r\n          <br />\r\n          <br />\r\n          <Editor \r\n            editorState={editorState}\r\n            wrapperClassName=\"s1-bi__entry-wrapper\"\r\n            onEditorStateChange={(editorState:EditorState) => setEditorState(editorState)}\r\n          />\r\n          <br />\r\n          <br />\r\n          <label htmlFor=\"file-upload\">Upload image:</label>\r\n          <br />\r\n          <br />\r\n          <input type=\"file\" id=\"file-upload\" name=\"file\" accept=\"image/*\" />\r\n          <br />\r\n          <br />\r\n          <input className=\"button\" type=\"submit\" value=\"Save\" />\r\n        </form>\r\n        {error && <p>Error : {error}</p>}\r\n        <br/>\r\n        <button onClick={() => setImage('')}>Clear image</button>\r\n        <br/>\r\n        {imageToUpload     ? \r\n                                        <img \r\n                                          src={imageToUpload}\r\n                                          alt='imageRetrieved' \r\n                                          style={{ height: \"50%\", width: \"50%\", marginTop: \"20px\" }} />\r\n                                      : <img \r\n                                          src={img} \r\n                                          alt='blog'\r\n                                          style={{ height: \"10rem\", width: \"13rem\", marginTop: \"40px\" }}></img>\r\n                                      }\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default EntryFormPage;","import React, { useEffect, useState } from 'react';\nimport { DataService } from '../controllers/DataService/DataService';\nimport EntryFormPage from './EntryFormPage';\nimport { User } from '../types/TypeDefs';\nimport { Redirect } from 'react-router';\n\n\ninterface ICreateBlogProps {\n  dataService: DataService;\n  currentUser?: User;\n}\n\nconst CreateBlog: React.FC<ICreateBlogProps> = (props) => {\n\n  const { currentUser, dataService } = props;\n\n  const [userId,setUserId] = useState<string>('');\n  const [completed,setCompleted] = useState<boolean>(false);\n\n  useEffect(() => {\n    if(currentUser){\n      const retrieveUserId = () => {\n        return new Promise((resolve) => {\n            currentUser.user.getUserAttributes((err,result) => {\n              if(err){\n                alert(err);\n                return '';\n              } else{\n                if(result){\n                  resolve(result[0].Value);\n                }\n              }\n            })\n        })\n      }\n\n      retrieveUserId().then(res => { \n        setUserId(res as string);\n      });\n    }\n  },[currentUser]);\n\n  return (\n      <div className=\"s4-cc\">\n        <h1>Create blog</h1>\n        <EntryFormPage\n          onSubmission={(title:string,content:string,blogPhotoId:string) => {\n            dataService.createBlog({\n              title,\n              content,\n              blogPhotoId,\n              user: userId\n            }).then(res => {\n              if(res === true) setCompleted(true);\n            }).catch(err => console.log(err));\n\n          }}\n          dataService={dataService}\n          userId={userId}\n        />\n        {completed && <Redirect to='/dashboard' />}\n      </div>\n    );\n};\n\nexport default CreateBlog;\n\n","import React from 'react';\r\nimport { Search } from \"../types/TypeDefs\";\r\n\r\n\r\ninterface IFilterProps {\r\n  text: string;\r\n  search: Search;\r\n  setText: (textArg:string) => void;\r\n  setSearch: (search:Search) => void;\r\n}\r\n\r\nexport const BlogListFilter:React.FC<IFilterProps> = (props) => {\r\n  \r\n    const { text, search, setText, setSearch } = props;\r\n\r\n    return(\r\n      <div className=\"s2-lf-wrapper\">\r\n        <h3 className=\"s2-lf__title\">Search by:</h3>\r\n        <div className=\"s2-lf__container\">\r\n          <input\r\n            className=\"s2-lf__bar\"\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setText(e.target.value)}\r\n          />\r\n          <span>\r\n            <select\r\n              className=\"s2-lf__pulldown\"\r\n              value={search}\r\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setSearch(e.target.value as Search)}\r\n            >\r\n              <option value='Title'>Title</option>\r\n              <option value='Content'>Content</option>\r\n            </select>\r\n          </span>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n","import React from \"react\";\n\n\nexport const Spinner:React.FC = () => {\n    return (\n        <div className=\"lds-container\">\n            <div className=\"lds-default\">\n                <div></div><div></div><div></div>\n                <div></div><div></div><div></div>\n                <div></div><div></div><div></div>\n                <div></div><div></div><div></div>\n            </div>\n        </div>\n    )\n}","import { Blog } from \"../types/TypeDefs\"\n\nconst paginateLocal = (blogs:Blog[], page:number):Blog[] => {\n\n    const end:number = page * 5;\n    const start:number = end - 5;\n    const result:Blog[] = [];\n\n    for (let i = start; i < end; i++) {\n      if (blogs[i]) result.push(blogs[i]);\n    }\n\n    return result;\n\n}\n\n\nexport default paginateLocal;","import { Blog, Search } from \"../types/TypeDefs\"\n\nconst filter = (blogs:Blog[], text:string, search:Search):Blog[] => {\n\n    if(text){\n        search === \"Title\"\n        ? (blogs = blogs.filter((item:Blog) => item.title.includes(text)))\n        : (blogs = blogs.filter((item:Blog) => item.content.includes(text)));\n    }\n\n    return blogs;\n\n}\n\n\nexport default filter;","import BlogItem from \"./BlogItem\";\r\nimport { BlogListFilter } from \"./BlogListFilter\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Blog, Search } from \"../types/TypeDefs\";\r\nimport { DataService } from \"../controllers/DataService/DataService\";\r\nimport { Spinner } from './Spinner';\r\nimport paginateLocal from '../utils/paginate';\r\nimport filterBlogs from '../utils/filter';\r\n\r\ninterface IDashProps {\r\n  dataService: DataService\r\n}\r\n\r\nconst Dashboard:React.FC<IDashProps> = (props) => {\r\n\r\n  const { dataService } = props\r\n\r\n  const [text,setText] = useState<string>('');\r\n  const [search,setSearch] = useState<Search>('Title');\r\n  const [page,setPage] = useState<number>(1);\r\n  const [blogCollection,setBlogCollection] = useState<Blog[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n\r\n    dataService.getBlogs().then(resultBlogs => {\r\n      setBlogCollection(resultBlogs);\r\n      setLoading(false);\r\n    }).catch((e) => console.log(e));\r\n    \r\n  },[dataService]);\r\n  \r\n  if(loading) return <Spinner />;\r\n\r\n  let resultBlogs: Blog[] = filterBlogs(blogCollection,text,search)\r\n\r\n  const displayLength = resultBlogs.length;\r\n\r\n  resultBlogs = paginateLocal(resultBlogs, page);\r\n      \r\n      return (\r\n        <div>\r\n          <BlogListFilter\r\n            text={text}\r\n            search={search}\r\n            setText={(textArg:string) => {  setText(textArg);\r\n                                            setPage(1);}}\r\n            setSearch={(searchArg:Search) => setSearch(searchArg)}\r\n          />\r\n          <div className=\"s3-bc\">\r\n            {resultBlogs?.map((item:Blog) => (\r\n              <BlogItem key={item.id} blog={{ ...item }} dataService={dataService}/>\r\n            ))}\r\n          </div>\r\n          <div className=\"page-numbers\">\r\n              {[...Array(Math.ceil(displayLength / 5))].map((_, index) => (\r\n                <button\r\n                  key={index}\r\n                  className=\"page-button\"\r\n                  onClick={() => setPage(index+1)}\r\n                >\r\n                  {index + 1}\r\n                </button>\r\n              ))}\r\n            </div>\r\n        </div>\r\n      )\r\n  }\r\n\r\nexport default Dashboard;","import React from 'react';\n\n\nconst Home:React.FC = () => {\n\n    return(    \n        <h1 style={{fontSize : '1em', color:'white', padding:'4em',marginTop:'0'}}>Welcome to the Home page.</h1>\n    );\n}\n\nexport default Home;","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import { User, UserAttribute } from '../../types/TypeDefs';\nimport Amplify, { Auth } from 'aws-amplify';\nimport { config } from '../config';\nimport { CognitoUser } from '@aws-amplify/auth';\n// import { Credentials } from 'aws-sdk/lib/credentials';\n// import AWS from 'aws-sdk';\n\n\nAmplify.configure({\n    Auth: {\n        mandatorySignIn: false,\n        region: config.REGION,\n        identityPoolId: config.IDENTITY_POOL_ID,\n        userPoolId: config.USER_POOL_ID,\n        userPoolWebClientId: config.APP_CLIENT_ID,\n        authenticationFlowType: 'USER_SRP_AUTH'\n    }\n})\n\nexport class AuthService {\n\n    public async login(email: string, password:string): Promise<User|undefined>{\n        try{\n            const user = await Auth.signIn(email, password) as CognitoUser;\n\n            // console.log(user);\n            // await this.getAWSTemporaryCreds(user);\n\n            return {\n                username: user.getUsername(),\n                user\n            };\n        } catch (error){\n            return undefined;\n        }\n    }\n\n    public async getUserAttributes(user: User):Promise<UserAttribute[]>{\n        const result : UserAttribute[] = []\n        const attributes = await Auth.userAttributes(user.user);\n        result.push(...attributes);\n        return result;\n    }\n\n    public async signUp(username:string,password:string,email:string): Promise<User|undefined> {\n        try {\n            const { user } = await Auth.signUp({\n                username,\n                password,\n                attributes: {\n                    email\n                }\n            });\n        \n            return {\n                username: user.getUsername(),\n                user\n            };\n        } catch (error) {\n            console.log('error signing up:', error);\n            return undefined;\n        }\n    }\n\n    public async confirmSignUp(username:string, code:string):Promise<boolean> {\n        try{\n            await Auth.confirmSignUp(username, code);\n            return true;\n        } catch(error){\n            console.log('Error confirming sign up', error)\n            return false;\n        }\n    }\n\n    public async signOut() {\n        try{\n            await Auth.signOut();\n        }catch(error){\n            console.log('Error signing out: ', error)\n        }\n    }\n\n    // private async getAWSTemporaryCreds(user: CognitoUser){\n    //     const cognitoIdentityPool = `cognito-idp.${config.REGION}.amazonaws.com/${config.USER_POOL_ID}`; \n    //     AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    //         IdentityPoolId: config.IDENTITY_POOL_ID,\n    //         Logins: {\n    //             [cognitoIdentityPool]: user.getSignInUserSession()!.getIdToken().getJwtToken()\n    //         }\n    //     }, {\n    //         region: config.REGION\n    //     });\n    //     await this.refreshCredentials();\n    // }\n\n    \n    // private async refreshCredentials(): Promise<void>{\n    //     return new Promise((resolve, reject)=>{\n    //         (AWS.config.credentials as Credentials).refresh(err =>{\n    //             if (err) {\n    //                 reject(err)\n    //             } else {\n    //                 resolve()\n    //             }\n    //         })\n    //     })\n    // }\n\n}\n","import gql from 'graphql-tag';\r\n\r\nexport const CREATE_USER = gql`\r\n  mutation ($createUserInput: NewUserInput!) {\r\n    createUser(input: $createUserInput) {\r\n      id\r\n      username\r\n      email\r\n      password\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation ($loginInput: AuthInput!) {\r\n    login(input: $loginInput) {\r\n      id\r\n      username\r\n      email\r\n      password\r\n      tokens\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FIND_USER = gql`\r\n  query Query($userId: ID!) {\r\n    user(id: $userId) {\r\n      id\r\n      username\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_BLOG = gql`\r\n  mutation ($createBlogInput: NewBlogInput!) {\r\n    createBlog(input: $createBlogInput) {\r\n      id\r\n      title\r\n      content\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_ENTRY = gql`\r\n  mutation ($createEntryInput: NewEntryInput!) {\r\n    createEntry(input: $createEntryInput) {\r\n      id\r\n      title\r\n      content\r\n      createdAt\r\n      blog_id\r\n      user\r\n    }\r\n  }\r\n`;\r\nexport const BLOGS_BY_USER = gql`\r\n  query Query($userId: ID!) {\r\n    blogsByUser(id: $userId) {\r\n      id\r\n      title\r\n      content\r\n      createdAt\r\n      blogPhotoId\r\n      entries {\r\n        id\r\n      }\r\n      owner {\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_BLOG = gql`\r\n  mutation ($deleteBlogInput: deleteBlogType!) {\r\n    deleteBlog(input:$deleteBlogInput) {\r\n      id\r\n    }\r\n  }\r\n`;\r\nexport const LOAD_BLOGS = gql`\r\n  query {\r\n    blogs {\r\n      id\r\n      title\r\n      content\r\n      createdAt\r\n      blogPhotoId\r\n      entries {\r\n        id\r\n      }\r\n      owner {\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FIND_BLOG = gql`\r\n  query Query($blogId: ID!) {\r\n    blog(id: $blogId) {\r\n      id\r\n      title\r\n      content\r\n      createdAt\r\n      blogPhotoId\r\n      entries {\r\n        id\r\n        title\r\n        content\r\n        createdAt\r\n        entryPhotoId\r\n        owner {\r\n          username\r\n        }\r\n      }\r\n      owner {\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const base64Encode = (file:File):Promise<any> => new Promise((res,rej) => {\n    const reader = new FileReader();\n\n    reader.readAsDataURL(file);\n    reader.onload = () => res(reader.result);\n    reader.onerror = error => rej(error);\n\n});","import { Blog, Entry, NewBlogInput, NewEntryInput, NewUserInput } from '../../types/TypeDefs';\nimport { API, Auth } from 'aws-amplify';\nimport { LOAD_BLOGS, FIND_BLOG, CREATE_BLOG, CREATE_ENTRY, BLOGS_BY_USER, CREATE_USER, DELETE_BLOG } from \"./protocol\";\nimport { base64Encode } from '../../utils/base64Encode';\nimport { S3 } from 'aws-sdk';\nimport { config } from '../config';\nimport { generateRandomId } from '../../utils/generateId';\n\n\nexport class DataService {\n\n    private async getAuthToken():Promise<string>{\n        return (await Auth.currentSession()).getIdToken().getJwtToken()\n    }\n\n    public async getBlogs(): Promise<Blog[]>{\n     \n        const result:any = await API.graphql({query:LOAD_BLOGS});\n\n        return result.data.blogs;\n    }\n\n    public async getBlogsByUser(id:string):Promise<Blog[]>{\n        \n        try{    \n            const result: any = await API.graphql({query:BLOGS_BY_USER, variables:{ userId: id}});\n            console.log(result);\n            return result.data.blogsByUser;\n        } catch(err){\n            console.log('From dataservice ',err);\n            return [];\n        }\n    }\n\n    public async loadBlog(id:string): Promise<Blog>{\n        \n        const result: any = await API.graphql({query:FIND_BLOG, variables:{ blogId: id }})\n\n        return result.data.blog;\n    }\n\n    public async getBlogFile(key:string):Promise<string>{\n\n        let result: any;\n\n        const s3Client = new S3({\n            region: config.REGION\n        })\n\n        const params = {\n            \"Bucket\": config.BLOGS_PHOTOS_BUCKET,\n            \"Key\": 'blogs/' + key\n        };\n\n        try {\n            result = await s3Client.getObject(params).promise();    \n        } catch (error:any) {\n            console.log('500 - ', error);\n        }\n\n        return result;\n    }\n\n    public async uploadBlogFile(file: File){\n\n        let authToken;\n\n        try{\n            authToken = await this.getAuthToken();\n        }catch(e){\n            console.log(e);\n        }\n        \n        let fileBase64 = await base64Encode(file);\n\n        const blogPhotoId = generateRandomId();\n\n        let result: any; \n        \n        try{\n            result = await API.post('blogs-photos-api',`blogs/?filename=${blogPhotoId}`, {\n                body: fileBase64,\n                headers: {\n                    \"Authorization\": `Bearer ${authToken}`,\n                    \"Content-type\": 'image/jpeg'\n                }\n            });\n            \n        }catch(e){\n            console.log(e);\n            return '';\n        } \n\n        console.log('From REST : ', result)\n\n        return blogPhotoId;\n    }\n\n    public async createBlog(blog:NewBlogInput): Promise<boolean>{\n\n        let resultBlog: Blog;\n\n\n        try{\n            const authToken = await this.getAuthToken();\n\n            console.log('Auth token: ', authToken);\n\n            resultBlog = await API.graphql({    query:CREATE_BLOG, \n                                                variables:{createBlogInput:{ ...blog }},\n                                                authMode: 'AMAZON_COGNITO_USER_POOLS',\n                                                authToken }) as Blog;\n        } catch(e){\n            console.log(e);\n            return false;\n        }\n\n        console.log('Blog created succesfully ', resultBlog);\n\n        return true;\n    }\n\n    public async deleteBlog(id:string,user:string): Promise<boolean> {\n        \n        try {\n            const authToken = await this.getAuthToken();\n\n            //let result:string;\n\n            const result = await API.graphql({\n                query:DELETE_BLOG,\n                variables:{deleteBlogInput: {id,user}},\n                authMode: 'AMAZON_COGNITO_USER_POOLS',\n                authToken\n            });\n            \n            console.log('From dataService result: ',result);\n\n            return true;\n        } catch (error) {\n            console.log('From dataservice error: ',error); \n            return false;           \n        }\n    }\n\n    public async createEntry(entry:NewEntryInput): Promise<boolean>{\n        \n        let resultEntry: Entry;\n\n        try{\n            const authToken = await this.getAuthToken();\n\n            resultEntry = await API.graphql({   query:CREATE_ENTRY, \n                                                variables:{createEntryInput:{ ...entry}},\n                                                authMode: 'AMAZON_COGNITO_USER_POOLS',\n                                                authToken }) as Entry;\n        }catch(e){\n            console.log(e);\n            return false;\n        }\n\n        console.log('Entry created succesfully ', resultEntry)\n\n        return true;\n    }\n\n    public async createUser(user:NewUserInput): Promise<boolean>{\n\n        try{    \n            await API.graphql({ query:CREATE_USER, \n                                variables:{createUserInput: {...user }}});\n            return true;\n        } catch(err){\n            console.log('From dataservice ',err);\n            return false;\n        }\n\n    }\n    // public getEntries():Entry[] {\n    //     //return this.entryCollection\n    //     return [];\n    // }\n\n\n    // public addEntry():void {\n    //     //this.entryCollection.push(entry); \n    //     return;\n    // }\n\n}","\nexport function generateRandomId(): string{\n    return Math.random().toString(36).slice(2);\n}","import EntryFormPage from './EntryFormPage';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { RouteComponentProps, useLocation } from 'react-router-dom';\r\nimport { User } from '../types/TypeDefs';\r\nimport { DataService } from '../controllers/DataService/DataService';\r\nimport { Redirect } from 'react-router';\r\n\r\ninterface ICreateEntryProps {\r\n  dataService: DataService;\r\n  currentUser?: User;\r\n}\r\n\r\ninterface CustomState {\r\n  blog_id: string;\r\n}\r\n\r\nexport const CreateEntry:React.FC<ICreateEntryProps & RouteComponentProps<{}>> = (props) => {\r\n\r\n  const { currentUser, dataService } = props;\r\n\r\n  const { state } = useLocation<CustomState>();\r\n  const [userId,setUserId] = useState<string>('');\r\n  const [completed, setCompleted] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if(currentUser){\r\n      const retrieveUserId = () => {\r\n        return new Promise((resolve) => {\r\n            currentUser!.user.getUserAttributes((err,result) => {\r\n              if(err){\r\n                alert(err);\r\n                return '';\r\n              } else{\r\n                if(result){\r\n                  resolve(result[0].Value);\r\n                }\r\n              }\r\n            })\r\n        })\r\n      }\r\n\r\n      retrieveUserId().then(res => { \r\n        setUserId(res as string);\r\n      });\r\n    }\r\n  },[currentUser]);\r\n\r\n  return (\r\n    <div className=\"s4-cc\">\r\n      <h1>Create entry</h1>\r\n      <EntryFormPage\r\n        onSubmission={(title:string,content:string,blogPhotoId:string) => {\r\n\r\n          dataService.createEntry({\r\n            title,\r\n            content,\r\n            user: userId,\r\n            blog_id : state.blog_id,\r\n            entryPhotoId: blogPhotoId\r\n          }).then(res => {\r\n            if(res === true) setCompleted(true);\r\n          }).catch(() => console.log('Error creating entry'));\r\n\r\n        }}\r\n        dataService={dataService}\r\n        userId={userId}\r\n      />\r\n      {completed && <Redirect to='/dashboard' />}\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/facebook_icon.0121b0e0.svg\";","export default __webpack_public_path__ + \"static/media/portfolio-icon.e18b049c.png\";","export default __webpack_public_path__ + \"static/media/github-logo-cat.c76697ae.png\";","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport img from \"../images/facebook_icon.svg\";\nimport img2 from \"../images/portfolio-icon.png\";\nimport img3 from \"../images/github-logo-cat.png\";\n\nexport const Footer:React.FC = () => (\n  <div className=\"s5-fc\">\n    <ul>\n      <li>Follow me on: </li>\n      <li>\n        <a href=\"https://www.facebook.com\">\n          <p>Facebook</p>\n          <span>\n            <img\n              src={img}\n              alt=\"facebook\"\n              style={{ height: \"3rem\", width: \"3rem\" }}\n            ></img>\n          </span>\n        </a>\n      </li>\n      <li>\n        <a href=\"http://dimo-portfolio.net\">\n          <p>Portfolio</p>\n          <span>\n            <img\n              src={img2}\n              alt=\"portfolio\"\n              style={{ height: \"3rem\", width: \"3rem\", marginTop:\"1rem\" }}\n            ></img>\n          </span>\n        </a>\n      </li>\n      <li>\n        <a href=\"http://www.github.com/dimo121\">\n          <p>Github</p>\n          <span>\n            <img\n              src={img3}\n              alt=\"Github\"\n              style={{ height: \"4rem\", width: \"5.5rem\" }}\n            ></img>\n          </span>\n        </a>\n      </li>\n      <li>\n        <NavLink to=\"/contactus\">\n          Contact Us\n        </NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/partners\">\n          Partners\n        </NavLink>\n      </li>\n    </ul>\n  </div>\n);\n\n","import React, { useState, useEffect } from 'react';\nimport { DataService } from '../controllers/DataService/DataService';\nimport { Blog, Search, User } from '../types/TypeDefs';\nimport BlogItem from './BlogItem';\nimport { BlogListFilter } from './BlogListFilter';\nimport { Spinner } from './Spinner';\nimport { Redirect } from 'react-router-dom';\nimport paginateLocal from '../utils/paginate';\nimport filter from '../utils/filter';\n\n\ninterface IMyBlogsPageProps {\n  dataService: DataService;\n  user: User|undefined;\n}\n\n\nconst MyBlogsPage:React.FC<IMyBlogsPageProps> = (props) => {\n  \n  const { user, dataService } = props;\n\n  const [blogCollection,setBlogCollection] = useState<Blog[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [page, setPage] = useState<number>(1);\n  const [text, setText] = useState<string>('');\n  const [search, setSearch] = useState<Search>('Title');\n  const [userId, setUserId] = useState<string>(''); \n  const [deleted, setDeleted] = useState<boolean>(false);\n\n\n  useEffect(() => {\n    const retrieveUserId = (): Promise<string> => {\n      return new Promise((res,rej) => {\n        if(user) {\n          user.user.getUserAttributes((err,result) => {\n            if(err){\n              alert(err);\n              return '';\n            } else{\n              if(result){\n                res(result[0].Value);\n              }\n            }\n          })\n        } else {\n          rej('Error retrieving user id');\n        }\n      })\n    }\n\n    const loadBlogs = async ():Promise<void> => {\n\n      let id:string;\n  \n      try {\n        id = await retrieveUserId() as string;\n      } catch (error) {\n        console.log(error);\n        return;\n      }\n  \n      const blogCollection:Blog[] = await dataService.getBlogsByUser(id);\n  \n      setBlogCollection(blogCollection);\n      setLoading(false);\n      setUserId(id);\n    \n    }\n\n    loadBlogs();\n  },[user,dataService]);\n\n\n    if(!user) return <h1 style={{fontSize : '1em', color:'white', padding:'4em',marginTop:'0'}}>Login to see user specific blogs</h1>;\n\n    if(loading) return <Spinner />;\n\n    let resultBlogs: Blog[] = filter(blogCollection,text,search)\n\n    const displayLength = resultBlogs.length;\n\n    resultBlogs = paginateLocal(resultBlogs, page);    \n\n    return (\n      <div>\n         <BlogListFilter\n            text={text}\n            search={search}\n            setText={(textArg:string) => {\n              setText(textArg);\n              setPage(1);\n            }}\n            setSearch={(searchArg:Search) => setSearch(searchArg)}\n          />\n        <div className=\"s3-bc\">\n          {resultBlogs.map((item,index) => (\n            <div key={index}>\n              <BlogItem blog={{ ...item }} dataService={dataService}/>\n              <button\n                className=\"blog-button delete-button\"\n                onClick={async () => {\n                  const result:boolean = await dataService.deleteBlog(item.id,userId)\n                \n                  if(result){\n                    setDeleted(true);\n                  }\n                }}\n              >\n                Delete\n              </button>\n            </div>\n          ))}\n        </div>\n        <div className=\"page-numbers\">\n              {[...Array(Math.ceil(displayLength / 5))].map((_, index) => (\n                <button\n                  key={index}\n                  className=\"page-button\"\n                  onClick={() => setPage(index+1)}\n                >\n                  {index + 1}\n                </button>\n              ))}\n          </div>\n          {deleted && <Redirect to='/dashboard' />}\n      </div>\n    );\n};\n\n\nexport default MyBlogsPage;","import React, { useEffect } from \"react\";\nimport history from \"../utils/history\";\n\nexport const ScrollToTop:React.FC = () => {\n  useEffect(() => {\n    const unlisten = history.listen(() => {\n      window.scrollTo(0, 0);\n    });\n    return () => {\n      unlisten();\n    };\n  }, []);\n\n  return null;\n};\n\n","\nimport React, { lazy, Suspense } from 'react';\nimport awsconfig from '../aws-exports';\nimport Amplify, { API } from 'aws-amplify';\nimport AWS from 'aws-sdk';\nimport { config } from '../controllers/config';\nimport '../styles/styles.css';\nimport Header from '../components/Header';\nimport BlogPage from '../components/BlogPage';\nimport CreateBlog from '../components/CreateBlog';\nimport Dashboard from '../components/Dashboard';\nimport Home from '../components/Home';\nimport history from '../utils/history';\nimport { Route, Router, Switch }  from 'react-router-dom';\nimport { User } from '../types/TypeDefs';\nimport { AuthService } from '../controllers/AuthService/AuthService';\nimport { DataService } from '../controllers/DataService/DataService';\nimport { CreateEntry } from '../components/CreateEntry';\nimport { Footer } from '../components/Footer';\nimport MyBlogsPage from '../components/MyBlogsPage';\nimport { ScrollToTop } from '../components/ScrollToTop';\n\nconst Contact = lazy(() => import(\"../components/Contact\"));\nconst Partners = lazy(() => import(\"../components/Partners\"));\n\nAmplify.configure(awsconfig);\nAPI.configure(awsconfig);\n\nAWS.config.region = 'ap-southeast-2';\n\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: config.IDENTITY_POOL_ID\n});\n\ninterface IAppState {\n  user: User | undefined\n}\n\nexport default class AppRouter extends React.Component<{},IAppState>{\n\n  constructor(props:any){\n    super(props);\n\n    this.state = {\n      user: undefined\n    }\n      \n    this.setUser = this.setUser.bind(this);\n  }\n\n  private authService: AuthService = new AuthService();\n  private dataService: DataService = new DataService();\n\n  private setUser(user:User|undefined){\n    \n    this.setState({\n      user\n    });\n      \n    console.log('Logged in user is: ', user?.username);\n  };\n\n  render(){\n    return (\n        <div className='main-container'>\n          <Router history={history}>\n            <div>\n              <ScrollToTop />\n              <Header user={this.state.user} setUser={this.setUser} authService={this.authService}/>\n              <div className='page-container'>\n                <Switch>\n                  <Route exact path='/' component={Home} />\n                  <Route exact path='/dashboard' \n                          render={(props) => (\n                            <Dashboard {...props} dataService={this.dataService} />\n                          )} \n                  />\n                  <Route exact path=\"/createblog\"\n                        render={(props) => (\n                            <CreateBlog {...props} dataService={this.dataService} currentUser={this.state.user}/>\n                        )} \n                  />\n                  <Route exact path=\"/createentry\"\n                        render={(props) => (\n                            <CreateEntry {...props} dataService={this.dataService} currentUser={this.state.user}/>\n                        )} \n                  />\n                  <Route exact path=\"/myblogs\"\n                        render={(props) => <MyBlogsPage {...props} dataService={this.dataService} user={this.state.user} />} \n                  />\n                  <Route exact path=\"/blog/:id\" \n                        render={(props) => <BlogPage {...props} dataService={this.dataService}/>}\n                  />\n                  <Route exact path=\"/partners\" \n                        render={() => \n                    <Suspense fallback={<h1>Loading...</h1>}>\n                      <Partners />\n                    </Suspense>} \n                  />\n                  <Route exact path=\"/contactus\" render={() => \n                    <Suspense fallback={<h1>Loading...</h1>}>\n                      <Contact />\n                    </Suspense>}\n                  />\n                </Switch>\n              </div>\n              <Footer />\n            </div>\n          </Router>\n        </div>\n    )\n  }\n}","import ReactDOM from 'react-dom';\nimport './index.css';\nimport AppRouter from './router/AppRouter';\n\n\nReactDOM.render(\n    <AppRouter />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}