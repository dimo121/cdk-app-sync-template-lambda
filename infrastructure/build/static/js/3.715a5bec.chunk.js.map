{"version":3,"sources":["../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/methods/send/send.js","controllers/EmailService/EmailService.ts","components/Contact.tsx"],"names":["store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","httpResponse","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","templatePrams","uID","_userID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","EmailService","message","templateParams","config","EMAIL_SERVICE_ID","EMAIL_TEMPLATE_ID","EMAIL_USER_ID","Error","Contact","useState","name","setName","email","setEmail","subject","setSubject","content","setContent","error","setError","emailService","className","onSubmit","e","preventDefault","sendEmail","console","log","htmlFor","type","id","placeholder","onChange","value","cols","rows"],"mappings":"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","file":"static/js/3.715a5bec.chunk.js","sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, userID) => {\n    const uID = userID || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.2.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { config } from '../config';\nimport { send } from 'emailjs-com';\nimport { EmailMessage } from '../../types/TypeDefs';\n\nexport class EmailService {\n\n    public async sendEmail(message: EmailMessage): Promise<void> {\n\n        const templateParams = { ...message };\n\n        try{\n\n            await send(config.EMAIL_SERVICE_ID, config.EMAIL_TEMPLATE_ID, templateParams, config.EMAIL_USER_ID);\n\n        } catch(err:any){\n\n            throw new Error(err);\n        }\n    }\n\n}\n","import React, { useState } from 'react';\nimport { EmailService } from '../controllers/EmailService/EmailService';\n\nconst Contact:React.FC = () => {\n\n    const [name,setName] = useState<string>('');\n    const [email,setEmail] = useState<string>('');\n    const [subject,setSubject] = useState<string>('');\n    const [content,setContent] = useState<string>(``);\n    const [error,setError] = useState<string>('');\n    \n    const emailService: EmailService = new EmailService();\n\n    const onSubmit = (e:React.SyntheticEvent<EventTarget>) => {\n        e.preventDefault();\n\n        try{ \n            emailService.sendEmail({name,email,subject,content})\n            console.log(\"Email sent successfully : \",name,\" \",email,\" \",subject,\" \",content);\n        }catch(e:any){\n            setError(e);\n            console.log(e);\n        }\n\n    }\n\n    return (\n        <div className='s4-cc'>\n            <h1>Contact us</h1>\n            <h5><i>Please fill in the form and we will respond within 48 business hours</i></h5>\n            <div className=\"s4-cc__ec\">\n                <form onSubmit={onSubmit}>\n                    <label htmlFor=\"name\">Name:</label>\n                    <br />\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        placeholder=\"\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>):void => setName(e.target.value)}\n                    ></input>\n                    <br />\n                    <br />\n                    <label htmlFor=\"email\">Email:</label>\n                    <br />\n                    <input\n                        type=\"text\"\n                        id=\"email\"\n                        name=\"email\"\n                        placeholder=\"\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>):void => setEmail(e.target.value)}\n                    ></input>\n                    <br />\n                    <br />\n                    <label htmlFor=\"title\">Subject:</label>\n                    <br />\n                    <input\n                        type=\"text\"\n                        id=\"subject\"\n                        name=\"subject\"\n                        placeholder=\"\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>):void => setSubject(e.target.value)}\n                    ></input>\n                    <br />\n                    <br />\n                    <label htmlFor=\"content\">Content:</label>\n                    <br />\n                    <textarea\n                        id=\"content\"\n                        name=\"content\"\n                        cols={100}\n                        rows={20}\n                        placeholder=\"\"\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>):void => setContent(e.target.value)}\n                    ></textarea>\n                    <br />\n                    <br />\n                    <input className=\"button\" type=\"submit\" value=\"Send\" />\n                </form>\n                {error && <p className=\"s4-cc__entry-error\">Error : {error}</p>}\n            </div>\n        </div>\n    )\n}\n\nexport default Contact;"],"sourceRoot":""}